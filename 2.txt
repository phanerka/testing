Waterfall:
Анализ -> Проектирование -> Разработка -> Тестирование -> Поддержка
Плюсы:
 - очень прямолинейная и простая методика
Минусы:
 - надо делать работу оооочень качественно, чтобы не наткнуться на тонну проблем в конце разработки


Agile - больше список правил, которые стоит соблюдать, чем список стадий разработки
 - взаимодействие превыше инструментов и процессов
 - Рабочая програ > хорошая документация
 - Коллаборация с клиентом > разрешение конфликтов
 - Реакция на изменения > следование плану


Scrum уже описывается более детально
Роли:
 - владелец продукта
	 - должен лучше всех видеть и прдставлять конечный продукт
	 - предоставляет истории (фичи, какие то отдельные рекомендации, которые надо добавить)
	 - расставляет приоритеты для историй
	 - управляет Backlog и добавляет фичи для скрама
	 - общаться со всеми людьми
 - scrum мастер
	 - обязан за то, чтобы все остальные люли понимали хорошо методологию скрама
	 - обычно не отдельная профессия, а просто один из крабов-разрабов, понимающих хорошо скрам
	 - помогает владельцу управлять Backlog более эффективно и раздавать задачи
	 - помогает разрабам с проблемами
 - команда разработки
	 - маленькая, само организованная команда (3-7 чел., лучше всего до 9)
	 - работают вместе
	 - включают и тестировщика, и проектировщика, и т.д . и т.д. в зависимости от того, что надо для разработки

События:
 - Scrum Grooming (уход за скрамом)
	 - обычно выполняется перед спринтом (обычно в конце прошлого спринта)
	 - для определения требований для историй
	 - можно спросить владельца
	 - определение, как история должна быть разработана и протестирована
 - Sprint Planning (планирование спринта)
	 - выборка историй высокого приоритета
	 - обычно происходит на 1ый день спринта
	 - разбитие огромных задач на более мелкие
	 - выделение времени на каждую задачу
 - Daily Scrum / Standup (ежедневный скрам)
	 - очень краткая встреча, на 5-10 минут (теоретически.)0) )
	 - все сидят в одном месте в одной комнате
	 - все крабы делятся прогрессом и проблемами при разработке (что сделали, что планируют сделать и какие проблемы были)
 - Sprint Review
	 - в конце спринта
	 - должно иметь рабочее демо с фичами
	 - длительность должна быть приблизительно краткой, но может быть длинее standup
 - Spring Retroperspective (взгляд обратно)
	 - похоже на планирование
	 - но еще надо решить, чтоб было сделано хорошо, а что херово


Burndown: в идеальном случае чем больше прошло дней, тем меньше должно быть усилий для создания приложения


 - Product Backlog - список всех фич, нужных для реализации
 - Sprint Backlog - все фичи, которые над сделать во время скрама
 - 


Scrum не идеален, и имеет недостатки:
 - эффективность очень сильно зависит от scrum мастера (насколько он хорошо понимает, как работает scrum)
 - эффективность очень сильно зависит от кооперации и самоорганизованности команды
 - тяжело реализовать в больших командах
 - постоянные дедлайны могут сделать скрам stressful для многих людей


Kanban - есть табличка, каждый столбик которой описывает состояние создавания фичи:
 - Todo (на будущее)
 - Dev (разработка)
 - Test (тестирование)
 - Release (релиз)
 - Done (сделано)
Фичи можно меремещать из одного столбика в другой в зависимости от приоритета


Extreme Programming - уже больше как философия, или набор практик
 - The Planning Game - лучше, чтоб планировало несколько, а не один человек, потому что так выше точность. ну, и больше вгзлядов со стороны
 - Short Release - мелкие фичи > большие фичи
 - Metaphor - сложные понятия лучше объяснять более простыми
 - Simple design - сналача создается минимальный, простейший рабочий концепт перд тем, как начнем чет более сложное
 - Testing
 - Refactoring (рефакторинг же) - перестройка и реорганизация кода для лучшего понимания
 - Pair Programming - 2 пацана делят 1 комп: один кодит, другой чешет бошку и пытается понять каракули первого
 - Collective ownership - в проект вкладывались все люди => все могут изменить какую-либо часть проекта
 - Continuous Integration
 - 40-часовая неделя - если часто перерабатывать, но разабы просто подохнут
 - очень близкая связь с клиентом, вплоть до того, что можно подойти и спросить у него
 - соблюдение стандартов кодинга, чтобы потом через пару лет могли прийти рандомные люди и понять, что творится

Test-Driven Development - тесты создаются не после создания программы, а перед
Позволяет исключить предопределенности в создании тестов (основываясь на коде, например)

Behavior-Driven Development - основано на использовании библиотеки JBehavior
Он позволяет сделать тестирование функций программы понятным и бизнесу, и программисту